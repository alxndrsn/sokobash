#!/bin/bash

MASK_TARGET=$((1 << 0))
MASK_WALL=$((1 << 1))
MASK_BOX=$((1 << 2))

info() {
	echo "# $@" #> /dev/null
}
debug() {
	echo "# $@" > /dev/null
}

load_game_state() {
	board_width=5
	board_height=5
	local total_tiles=$(($board_height * $board_width))
	for ((i=0; i<$total_tiles; ++i)); do
		board[$i]=0
	done
	sokoman_x=1
	sokoman_y=3
	add_target 0 0
	add_box 2 2
}

get_index() {
	local x=$1
	local y=$2
	echo $(($y * $board_width + $x))
}

add_box() {
	local x=$1
	local y=$2
	info "add_box(x=$x, y=$y)"
	local index=$(get_index $x $y)
	board[$index]=$MASK_BOX
}

add_target() {
	local x=$1
	local y=$2
	info "add_target(x=$x, y=$y)"
	local index=$(get_index $x $y)
	board[$index]=$MASK_TARGET
}

game_loop() {
	clear
	draw_board
	process_input
}

process_input() {
	read -s -n 1 in_key
	info "Received keyboard input: $in_key"
}

draw_board() {
	info "board=$board"
	for ((y=-1; y<=$board_height; ++y)); do
		line=""
		for ((x=-1; x<=$board_width; ++x)); do
			tile=$(get_tile $x $y)
			line="${line}${tile}"
		done
		echo $line
	done
}

get_tile() {
	local x=$1
	local y=$2
	debug "get_tile(x=$x, y=$y)"
	if (( $x < 0 || $x >= $board_width || $y < 0 || $y >= $board_height )); then
		echo 'w'
		return
	fi
	if [[ $x == $sokoman_x && $y == $sokoman_y ]]; then
		echo 'S'
		return
	fi
	local index=$(get_index $x $y)
	local val=${board[$index]}
	debug "val='$val'"
	if (($val & $MASK_WALL)); then
		echo 'w'
	elif (($val & $MASK_BOX)); then
		if (($val & $MASK_TARGET)); then
			echo 'O'
		else
			echo 'o'
		fi
	elif (($val & $MASK_TARGET)); then
		echo '.'
	else
		echo '_'
	fi
}

load_game_state
#while true; do
	game_loop
#done

